메모리 구조

프로그램이 실행되기 위해서는 먼저 프로그램이 메모리에 로드(load)되어야 합니다.
또한, 프로그램에서 사용되는 변수들을 저장할 메모리도 필요합니다.
따라서 컴퓨터의 운영체제는 프로그램의 실행을 위해 다양한 메모리 공간을 제공하고 있습니다.

프로그램이 운영체제로부터 할당받는 대표적인 메모리 공간은 4가지 있습니다.

	코드(code) 영역 	- 텍스트 영역, 실행할 프로그램의 코드가 저장되는 영역
	데이터(data) 영역	- 전역 변수와 정적(static) 변수가 저장되는 영역, 프로그램의 시작과 함께 할당되며, 프로그램이 종료되면 소멸
	스택(stack) 영역	- 함수의 호출과 관계되는 지역 변수와 매개변수가 저장되는 영역, 함수의 호출과 함께 할당되며, 함수의 호출이 완료되면 소멸
	힙(heap) 영역	- 사용자가 직접 관리할 수 있는 ‘그리고 해야만 하는’ 메모리 영역


스택과 힙의 장단점

	스택

	매우 빠른 액세스
	변수를 명시 적으로 할당 해제 할 필요가 없습니다.
	공간은 CPU에 의해 효율적으로 관리되고 메모리는 단편화되지 않습니다.
	지역 변수 만
	스택 크기 제한 (OS에 따라 다름)
	변수의 크기를 조정할 수 없습니다.
	
	힙

	변수는 전역 적으로 액세스 할 수 있습니다.
	메모리 크기 제한 없음
	(상대적으로) 느린 액세스
	효율적인 공간 사용을 보장하지 못하면 메모리 블록이 할당 된 후 시간이 지남에 따라 메모리가 조각화 될 수 있습니다. - 단편화
	메모리를 관리해야합니다 (변수를 할당하고 해제하는 책임이 있습니다) - 메모리누수


스택 프레임
	스택 영역에 저장되는 함수의 호출 정보를 스택 프레임(stack frame)

힙 영역 : 
	프로그램이 필요한 메모리를 미리 스택으로 확보하는 것은 비효율적. 
	할당해야 할 메모리의 크기를 프로그램이 실행되는 동안 결정해야 하는 경우(런 타임때) 유용하게 사용되는 공간


정적 메모리 할당

	프로그램이 실행하는 순간 프로그램이 사용할 메모리 크기를 고려하여 메모리의 할당이 이루어지는 것.
	자동변수는 스택을 사용하며, 함수가 종료되거나 변수 영역을 벗어나면 자동으로 공간 해제가 이루어 진다.

메모리 동적 할당

	메모리 동적 할당은 컴퓨터 프로그래밍에서 실행 시간 동안 사용할 메모리 공간을 할당하는 것을 말한다. 
	사용이 끝나면 운영체제가 쓸 수 있도록 반납하고 다음에 요구가 오면 재 할당을 받을 수 있다. 
	동적 할당은 프로세스의 힙영역에서 할당하므로 프로세스가 종료되면 운영 체제에 메모리 리소스가 반납되므로 해제된다.
	프로세스가 계속 실행될 때에는 동적할당 된 영역은 유지되므로 직접 해제하거나 가비지컬렉터를 이용하여 해제되도록 한다.

	상황에 따라 원하는 크기만큼의 메모리가 할당되므로 경제적이며, 이미 할당된 메모리라도 언제든지 크기를 조절할 수 있다.




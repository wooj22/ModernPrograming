
//특수 멤버 함수들의 자동 작성 조건을 숙지하라

//특수 멤버 함수(Special Member Function)
//  	컴파일러가 스스로 작성할 수 있는 멤버 함수들, 
//  	즉 기본 생성자와 소멸자, 복사 연산들, 이동 연산들을 가리켜 특수멤버함수 라고 부른다.
// 
//  생성자 (Constructor) 
//  소멸자 (Destructor) 
//  복사 생성자 (Copy Constructor) 
//  복사 할당자 (Copy Assignment) 
//  이동 생성자 (Move Constructor) 
//  이동 할당자 (Move Assignment)

//기본 생성자     - 사용자 선언 생성자가 없는 경우에만 자동으로 작성

//소멸자           - 기반 클래스 소멸자가 가상일 때에만 가상이다, 소멸자가 기본적으로 noexcept (C++11)

//복사 생성자     - 비정적 데이터 멤버들을 멤버별로 복사 생성, 사용자 선언 복사 생성자가 없을 때에만 자동으로 작성, 사용자 선언 복사 대입 연산자나 소멸자가 있는 클래스에서 이 함수가 자동 작성되는 기능은 비권장
//복사 대입 연산자 - 비정적 데이터 멤버들을 멤버별로 복사 대입, 사용자 선언 복사 연산자가 없을 때에만 자동, 복사 생성자 만들면 같이 작성 권장

//이동 생성자     - 비정적 데이터 멤버의 멤버별 이동 생성, 사용자 선언 복사 연산들과 이동 연산들, 소멸자가 없을 때에만 작성된다
//이동 대입 연산자 - 비정적 데이터 멤버의 멤버별 이동 대입, 사용자 선언 복사 연산들과 이동 연산들, 소멸자가 없을 때에만 작성된다

//3의 법칙(Rule of Three)
// 	만일, 클래스 설계 시 복사 생성자와 복사 연산자, 소멸자 중 하나라도 선언했다면 모두 선언해야 한다.
//	C++11: 이동 생성자, 이동 연산자 추가
//5의 법칙(Rule of Five)
//      	C++11에는 소멸자, 복사 생성자, 복사 할당자, 이동 생성자, 이동 할당자
//      	다섯 중 하나라도 사용자가 직접 구현한다면 나머지 넷도 모두 구현하는 것이 좋다.

-----------------------------------------------------------------------------------------------------------
자동생성 in C++ 11 총정리 ***

default 생성자 : 
	생성자 정의하면, 자동 생성 안된다. C++ 98과 동일
소멸자 : 
	부모가 virtual이면 자식도 virtual로 자동 생성. 정의하면 자동생성 안된다. 
	여기까지 C++ 98, C++ 11부터 바뀐점은 자동 생성된 소멸자가 noexcept로 만들어진다는 점.
copy 연산자들 : 
	해당 함수가 선언되지 않았을 때, move 연산자들이 정의되지 않았을 때 자동 생성된다. ***
	비정적 멤버들에 대해서 해당 복사 연산자를 호출하는 방식으로 동작한다.
move 연산자들 : 
	copy 연산자들, move 연산자들, 소멸자 모두가 정의되지 않았을 경우에만 자동 생성한다. ***
	비정적 멤버들에 대해서 move 연산자를 호출하는 방식으로 동작한다.

특수 멤버함수가 템플릿 함수인 경우

	템플릿으로 짜여진 특수 멤버함수가 정의된 경우 자동생성을 방지하는 룰이 적용되지 않는다.

// copy 생성자와 copy 대입 연산자의 자동 생성은 독립적이다. ***
// 	이 두 함수의 생성 조건이 서로서로에게 영향을 끼치지 않는다.

// move 생성자와 move 대입 연산자의 자동 생성은 의존적이다. ***
// 	copy의 예와는 달리 move 생성자와 대입 연산자 둘중 하나만 정의해도 둘다 자동생성이 안된다.

// move연산 자동 작성 조건 ***
//	클래스에 어떤 복사 연산도 선언되어 있지 않다.
//      	클래스에 어떤 이동 연산도 선언되어 있지 않다.
//      	클래스에 소멸자가 선언되어 있지 않다.

//출처: https://ozt88.tistory.com/24

자동 생성보다는 default를 사용하자 ***
자동생성에서 발생하는 버그를 줄일 수 있다.

---------------------------------------------------------------------------------------
복사 연산의 경우

상황
복사 생성자 선언
복사 배정 연산을 '사용하는 클라이언트 코드 작성

	결과
	복사 배정 연산자 자동 생성

상황
복사 배정 연산자 선언
복사 생성자를 '사용하는 클라이언트 코드 작성

	결과
	복사 생성자 자동 생성

---------------------------------------------------------------------------------------
이동 연산의 경우

상황
이동 생성자 선언
이동 배정 연산을 '사용하는 클라이언트 코드 작성

	결과
	이동 배정 연산자를 생성하지 않음
	원인
	이동 생성자를 선언했다면 자동으로 생성하는 것이 적합하지 않을 것이라 예상

상황
이동 배정 연산자 선언
이동 생성자를 '사용하는 클라이언트 코드 작성

	결과
	이동 생성자를 자동 생성하지 않음
	원인
	이동 배정 연산자를 선언했다면 자동으로 생성하는 것이 적합하지 않을 것이라 예상

---------------------------------------------------------------------------------------
그 외의 경우

상황
복사 연산 중 하나를 선언
이동 연산 '사용하는 클라이언트 코드 작성

	결과
	이동 연산들이 작성되지 않음
	원인
	복사 연산을 선언했다면 멤버별 복사가 적합하지 않기 때문에 멤버별 이동 역시 적합하지 않을 것이라 예상

상황
이동 연산 중 하나를 선언
복사 연산 '사용하는 클라이언트 코드 작성

	결과
	복사 연산들이 작성되지 않음
	원인
	이동 연산을 선언했다면 멤버별 이동이 적합하지 않기 때문에 멤버별 복사 역시 적합하지 않을 것이라 예상

상황
소멸자를 선언
복사 연산 및 이동 연산을 '사용하는 클라이언트 코드 작성

	결과
	복사 연산과 이동 연산들이 작성되지 않음
	원인
	소멸자를 선언했다면 복사 연산과 이동 연산이 적합하지 않을 것이라 예상
